// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhooks.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createWebhook = `-- name: CreateWebhook :one
INSERT INTO webhooks (id, name, description, claude_options, notification_config)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, description, claude_options, notification_config, is_active, created_at, updated_at
`

type CreateWebhookParams struct {
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	ClaudeOptions      interface{}    `json:"claude_options"`
	NotificationConfig interface{}    `json:"notification_config"`
}

func (q *Queries) CreateWebhook(ctx context.Context, arg CreateWebhookParams) (Webhook, error) {
	row := q.db.QueryRowContext(ctx, createWebhook,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ClaudeOptions,
		arg.NotificationConfig,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClaudeOptions,
		&i.NotificationConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWebhook = `-- name: DeleteWebhook :exec
UPDATE webhooks SET is_active = 0, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

func (q *Queries) DeleteWebhook(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteWebhook, id)
	return err
}

const getWebhook = `-- name: GetWebhook :one
SELECT id, name, description, claude_options, notification_config, is_active, created_at, updated_at FROM webhooks WHERE id = ? AND is_active = 1
`

func (q *Queries) GetWebhook(ctx context.Context, id string) (Webhook, error) {
	row := q.db.QueryRowContext(ctx, getWebhook, id)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClaudeOptions,
		&i.NotificationConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWebhookWithStats = `-- name: GetWebhookWithStats :one
SELECT 
    w.id, w.name, w.description, w.claude_options, w.notification_config, w.is_active, w.created_at, w.updated_at,
    COUNT(DISTINCT ak.id) as api_key_count,
    COUNT(DISTINCT eh.id) as execution_count,
    MAX(eh.created_at) as last_execution
FROM webhooks w
LEFT JOIN api_keys ak ON w.id = ak.webhook_id AND ak.is_active = 1
LEFT JOIN execution_histories eh ON w.id = eh.webhook_id
WHERE w.id = ? AND w.is_active = 1
GROUP BY w.id
`

type GetWebhookWithStatsRow struct {
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	ClaudeOptions      interface{}    `json:"claude_options"`
	NotificationConfig interface{}    `json:"notification_config"`
	IsActive           bool           `json:"is_active"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
	ApiKeyCount        int64          `json:"api_key_count"`
	ExecutionCount     int64          `json:"execution_count"`
	LastExecution      interface{}    `json:"last_execution"`
}

func (q *Queries) GetWebhookWithStats(ctx context.Context, id string) (GetWebhookWithStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getWebhookWithStats, id)
	var i GetWebhookWithStatsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClaudeOptions,
		&i.NotificationConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyCount,
		&i.ExecutionCount,
		&i.LastExecution,
	)
	return i, err
}

const listWebhooks = `-- name: ListWebhooks :many
SELECT id, name, description, claude_options, notification_config, is_active, created_at, updated_at FROM webhooks WHERE is_active = 1 ORDER BY created_at DESC
`

func (q *Queries) ListWebhooks(ctx context.Context) ([]Webhook, error) {
	rows, err := q.db.QueryContext(ctx, listWebhooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Webhook{}
	for rows.Next() {
		var i Webhook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ClaudeOptions,
			&i.NotificationConfig,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebhook = `-- name: UpdateWebhook :exec
UPDATE webhooks 
SET name = ?, description = ?, claude_options = ?, notification_config = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateWebhookParams struct {
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	ClaudeOptions      interface{}    `json:"claude_options"`
	NotificationConfig interface{}    `json:"notification_config"`
	ID                 string         `json:"id"`
}

func (q *Queries) UpdateWebhook(ctx context.Context, arg UpdateWebhookParams) error {
	_, err := q.db.ExecContext(ctx, updateWebhook,
		arg.Name,
		arg.Description,
		arg.ClaudeOptions,
		arg.NotificationConfig,
		arg.ID,
	)
	return err
}
