// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: global_settings.sql

package db

import (
	"context"
)

const getGlobalSetting = `-- name: GetGlobalSetting :one
SELECT setting_value FROM global_settings WHERE setting_key = ?
`

func (q *Queries) GetGlobalSetting(ctx context.Context, settingKey string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getGlobalSetting, settingKey)
	var setting_value interface{}
	err := row.Scan(&setting_value)
	return setting_value, err
}

const listGlobalSettings = `-- name: ListGlobalSettings :many
SELECT setting_key, setting_value, updated_at FROM global_settings ORDER BY setting_key
`

func (q *Queries) ListGlobalSettings(ctx context.Context) ([]GlobalSetting, error) {
	rows, err := q.db.QueryContext(ctx, listGlobalSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GlobalSetting{}
	for rows.Next() {
		var i GlobalSetting
		if err := rows.Scan(&i.SettingKey, &i.SettingValue, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGlobalSetting = `-- name: UpdateGlobalSetting :exec
UPDATE global_settings 
SET setting_value = ?, updated_at = CURRENT_TIMESTAMP
WHERE setting_key = ?
`

type UpdateGlobalSettingParams struct {
	SettingValue interface{} `json:"setting_value"`
	SettingKey   string      `json:"setting_key"`
}

func (q *Queries) UpdateGlobalSetting(ctx context.Context, arg UpdateGlobalSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateGlobalSetting, arg.SettingValue, arg.SettingKey)
	return err
}
